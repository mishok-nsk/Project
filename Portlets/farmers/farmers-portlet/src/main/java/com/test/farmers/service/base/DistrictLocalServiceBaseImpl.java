package com.test.farmers.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.liferay.portlet.asset.service.persistence.AssetEntryPersistence;
import com.liferay.portlet.asset.service.persistence.AssetTagPersistence;

import com.test.farmers.model.District;
import com.test.farmers.service.DistrictLocalService;
import com.test.farmers.service.persistence.DistrictPersistence;
import com.test.farmers.service.persistence.FarmerPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the district local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.test.farmers.service.impl.DistrictLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.test.farmers.service.impl.DistrictLocalServiceImpl
 * @see com.test.farmers.service.DistrictLocalServiceUtil
 * @generated
 */
public abstract class DistrictLocalServiceBaseImpl extends BaseLocalServiceImpl
    implements DistrictLocalService, IdentifiableBean {
    @BeanReference(type = com.test.farmers.service.DistrictLocalService.class)
    protected com.test.farmers.service.DistrictLocalService districtLocalService;
    @BeanReference(type = com.test.farmers.service.DistrictService.class)
    protected com.test.farmers.service.DistrictService districtService;
    @BeanReference(type = DistrictPersistence.class)
    protected DistrictPersistence districtPersistence;
    @BeanReference(type = com.test.farmers.service.FarmerLocalService.class)
    protected com.test.farmers.service.FarmerLocalService farmerLocalService;
    @BeanReference(type = com.test.farmers.service.FarmerService.class)
    protected com.test.farmers.service.FarmerService farmerService;
    @BeanReference(type = FarmerPersistence.class)
    protected FarmerPersistence farmerPersistence;
    @BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
    protected com.liferay.counter.service.CounterLocalService counterLocalService;
    @BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
    protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
    @BeanReference(type = com.liferay.portal.service.UserLocalService.class)
    protected com.liferay.portal.service.UserLocalService userLocalService;
    @BeanReference(type = com.liferay.portal.service.UserService.class)
    protected com.liferay.portal.service.UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    @BeanReference(type = com.liferay.portlet.asset.service.AssetEntryLocalService.class)
    protected com.liferay.portlet.asset.service.AssetEntryLocalService assetEntryLocalService;
    @BeanReference(type = com.liferay.portlet.asset.service.AssetEntryService.class)
    protected com.liferay.portlet.asset.service.AssetEntryService assetEntryService;
    @BeanReference(type = AssetEntryPersistence.class)
    protected AssetEntryPersistence assetEntryPersistence;
    @BeanReference(type = com.liferay.portlet.asset.service.AssetTagLocalService.class)
    protected com.liferay.portlet.asset.service.AssetTagLocalService assetTagLocalService;
    @BeanReference(type = com.liferay.portlet.asset.service.AssetTagService.class)
    protected com.liferay.portlet.asset.service.AssetTagService assetTagService;
    @BeanReference(type = AssetTagPersistence.class)
    protected AssetTagPersistence assetTagPersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private DistrictLocalServiceClpInvoker _clpInvoker = new DistrictLocalServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link com.test.farmers.service.DistrictLocalServiceUtil} to access the district local service.
     */

    /**
     * Adds the district to the database. Also notifies the appropriate model listeners.
     *
     * @param district the district
     * @return the district that was added
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public District addDistrict(District district) throws SystemException {
        district.setNew(true);

        return districtPersistence.update(district);
    }

    /**
     * Creates a new district with the primary key. Does not add the district to the database.
     *
     * @param districtId the primary key for the new district
     * @return the new district
     */
    @Override
    public District createDistrict(long districtId) {
        return districtPersistence.create(districtId);
    }

    /**
     * Deletes the district with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * @param districtId the primary key of the district
     * @return the district that was removed
     * @throws PortalException if a district with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public District deleteDistrict(long districtId)
        throws PortalException, SystemException {
        return districtPersistence.remove(districtId);
    }

    /**
     * Deletes the district from the database. Also notifies the appropriate model listeners.
     *
     * @param district the district
     * @return the district that was removed
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public District deleteDistrict(District district) throws SystemException {
        return districtPersistence.remove(district);
    }

    @Override
    public DynamicQuery dynamicQuery() {
        Class<?> clazz = getClass();

        return DynamicQueryFactoryUtil.forClass(District.class,
            clazz.getClassLoader());
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery)
        throws SystemException {
        return districtPersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.test.farmers.model.impl.DistrictModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
        throws SystemException {
        return districtPersistence.findWithDynamicQuery(dynamicQuery, start, end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.test.farmers.model.impl.DistrictModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return districtPersistence.findWithDynamicQuery(dynamicQuery, start,
            end, orderByComparator);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery)
        throws SystemException {
        return districtPersistence.countWithDynamicQuery(dynamicQuery);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @param projection the projection to apply to the query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery,
        Projection projection) throws SystemException {
        return districtPersistence.countWithDynamicQuery(dynamicQuery,
            projection);
    }

    @Override
    public District fetchDistrict(long districtId) throws SystemException {
        return districtPersistence.fetchByPrimaryKey(districtId);
    }

    /**
     * Returns the district with the primary key.
     *
     * @param districtId the primary key of the district
     * @return the district
     * @throws PortalException if a district with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public District getDistrict(long districtId)
        throws PortalException, SystemException {
        return districtPersistence.findByPrimaryKey(districtId);
    }

    @Override
    public PersistedModel getPersistedModel(Serializable primaryKeyObj)
        throws PortalException, SystemException {
        return districtPersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns a range of all the districts.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.test.farmers.model.impl.DistrictModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param start the lower bound of the range of districts
     * @param end the upper bound of the range of districts (not inclusive)
     * @return the range of districts
     * @throws SystemException if a system exception occurred
     */
    @Override
    public List<District> getDistricts(int start, int end)
        throws SystemException {
        return districtPersistence.findAll(start, end);
    }

    /**
     * Returns the number of districts.
     *
     * @return the number of districts
     * @throws SystemException if a system exception occurred
     */
    @Override
    public int getDistrictsCount() throws SystemException {
        return districtPersistence.countAll();
    }

    /**
     * Updates the district in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param district the district
     * @return the district that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public District updateDistrict(District district) throws SystemException {
        return districtPersistence.update(district);
    }

    /**
     * @throws SystemException if a system exception occurred
     */
    @Override
    public void addFarmerDistrict(long farmerId, long districtId)
        throws SystemException {
        farmerPersistence.addDistrict(farmerId, districtId);
    }

    /**
     * @throws SystemException if a system exception occurred
     */
    @Override
    public void addFarmerDistrict(long farmerId, District district)
        throws SystemException {
        farmerPersistence.addDistrict(farmerId, district);
    }

    /**
     * @throws SystemException if a system exception occurred
     */
    @Override
    public void addFarmerDistricts(long farmerId, long[] districtIds)
        throws SystemException {
        farmerPersistence.addDistricts(farmerId, districtIds);
    }

    /**
     * @throws SystemException if a system exception occurred
     */
    @Override
    public void addFarmerDistricts(long farmerId, List<District> Districts)
        throws SystemException {
        farmerPersistence.addDistricts(farmerId, Districts);
    }

    /**
     * @throws SystemException if a system exception occurred
     */
    @Override
    public void clearFarmerDistricts(long farmerId) throws SystemException {
        farmerPersistence.clearDistricts(farmerId);
    }

    /**
     * @throws SystemException if a system exception occurred
     */
    @Override
    public void deleteFarmerDistrict(long farmerId, long districtId)
        throws SystemException {
        farmerPersistence.removeDistrict(farmerId, districtId);
    }

    /**
     * @throws SystemException if a system exception occurred
     */
    @Override
    public void deleteFarmerDistrict(long farmerId, District district)
        throws SystemException {
        farmerPersistence.removeDistrict(farmerId, district);
    }

    /**
     * @throws SystemException if a system exception occurred
     */
    @Override
    public void deleteFarmerDistricts(long farmerId, long[] districtIds)
        throws SystemException {
        farmerPersistence.removeDistricts(farmerId, districtIds);
    }

    /**
     * @throws SystemException if a system exception occurred
     */
    @Override
    public void deleteFarmerDistricts(long farmerId, List<District> Districts)
        throws SystemException {
        farmerPersistence.removeDistricts(farmerId, Districts);
    }

    /**
     * @throws SystemException if a system exception occurred
     */
    @Override
    public List<District> getFarmerDistricts(long farmerId)
        throws SystemException {
        return farmerPersistence.getDistricts(farmerId);
    }

    /**
     * @throws SystemException if a system exception occurred
     */
    @Override
    public List<District> getFarmerDistricts(long farmerId, int start, int end)
        throws SystemException {
        return farmerPersistence.getDistricts(farmerId, start, end);
    }

    /**
     * @throws SystemException if a system exception occurred
     */
    @Override
    public List<District> getFarmerDistricts(long farmerId, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return farmerPersistence.getDistricts(farmerId, start, end,
            orderByComparator);
    }

    /**
     * @throws SystemException if a system exception occurred
     */
    @Override
    public int getFarmerDistrictsCount(long farmerId) throws SystemException {
        return farmerPersistence.getDistrictsSize(farmerId);
    }

    /**
     * @throws SystemException if a system exception occurred
     */
    @Override
    public boolean hasFarmerDistrict(long farmerId, long districtId)
        throws SystemException {
        return farmerPersistence.containsDistrict(farmerId, districtId);
    }

    /**
     * @throws SystemException if a system exception occurred
     */
    @Override
    public boolean hasFarmerDistricts(long farmerId) throws SystemException {
        return farmerPersistence.containsDistricts(farmerId);
    }

    /**
     * @throws SystemException if a system exception occurred
     */
    @Override
    public void setFarmerDistricts(long farmerId, long[] districtIds)
        throws SystemException {
        farmerPersistence.setDistricts(farmerId, districtIds);
    }

    /**
     * Returns the district local service.
     *
     * @return the district local service
     */
    public com.test.farmers.service.DistrictLocalService getDistrictLocalService() {
        return districtLocalService;
    }

    /**
     * Sets the district local service.
     *
     * @param districtLocalService the district local service
     */
    public void setDistrictLocalService(
        com.test.farmers.service.DistrictLocalService districtLocalService) {
        this.districtLocalService = districtLocalService;
    }

    /**
     * Returns the district remote service.
     *
     * @return the district remote service
     */
    public com.test.farmers.service.DistrictService getDistrictService() {
        return districtService;
    }

    /**
     * Sets the district remote service.
     *
     * @param districtService the district remote service
     */
    public void setDistrictService(
        com.test.farmers.service.DistrictService districtService) {
        this.districtService = districtService;
    }

    /**
     * Returns the district persistence.
     *
     * @return the district persistence
     */
    public DistrictPersistence getDistrictPersistence() {
        return districtPersistence;
    }

    /**
     * Sets the district persistence.
     *
     * @param districtPersistence the district persistence
     */
    public void setDistrictPersistence(DistrictPersistence districtPersistence) {
        this.districtPersistence = districtPersistence;
    }

    /**
     * Returns the farmer local service.
     *
     * @return the farmer local service
     */
    public com.test.farmers.service.FarmerLocalService getFarmerLocalService() {
        return farmerLocalService;
    }

    /**
     * Sets the farmer local service.
     *
     * @param farmerLocalService the farmer local service
     */
    public void setFarmerLocalService(
        com.test.farmers.service.FarmerLocalService farmerLocalService) {
        this.farmerLocalService = farmerLocalService;
    }

    /**
     * Returns the farmer remote service.
     *
     * @return the farmer remote service
     */
    public com.test.farmers.service.FarmerService getFarmerService() {
        return farmerService;
    }

    /**
     * Sets the farmer remote service.
     *
     * @param farmerService the farmer remote service
     */
    public void setFarmerService(
        com.test.farmers.service.FarmerService farmerService) {
        this.farmerService = farmerService;
    }

    /**
     * Returns the farmer persistence.
     *
     * @return the farmer persistence
     */
    public FarmerPersistence getFarmerPersistence() {
        return farmerPersistence;
    }

    /**
     * Sets the farmer persistence.
     *
     * @param farmerPersistence the farmer persistence
     */
    public void setFarmerPersistence(FarmerPersistence farmerPersistence) {
        this.farmerPersistence = farmerPersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(
        com.liferay.counter.service.CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        com.liferay.portal.service.ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public com.liferay.portal.service.UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(
        com.liferay.portal.service.UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public com.liferay.portal.service.UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(
        com.liferay.portal.service.UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    /**
     * Returns the asset entry local service.
     *
     * @return the asset entry local service
     */
    public com.liferay.portlet.asset.service.AssetEntryLocalService getAssetEntryLocalService() {
        return assetEntryLocalService;
    }

    /**
     * Sets the asset entry local service.
     *
     * @param assetEntryLocalService the asset entry local service
     */
    public void setAssetEntryLocalService(
        com.liferay.portlet.asset.service.AssetEntryLocalService assetEntryLocalService) {
        this.assetEntryLocalService = assetEntryLocalService;
    }

    /**
     * Returns the asset entry remote service.
     *
     * @return the asset entry remote service
     */
    public com.liferay.portlet.asset.service.AssetEntryService getAssetEntryService() {
        return assetEntryService;
    }

    /**
     * Sets the asset entry remote service.
     *
     * @param assetEntryService the asset entry remote service
     */
    public void setAssetEntryService(
        com.liferay.portlet.asset.service.AssetEntryService assetEntryService) {
        this.assetEntryService = assetEntryService;
    }

    /**
     * Returns the asset entry persistence.
     *
     * @return the asset entry persistence
     */
    public AssetEntryPersistence getAssetEntryPersistence() {
        return assetEntryPersistence;
    }

    /**
     * Sets the asset entry persistence.
     *
     * @param assetEntryPersistence the asset entry persistence
     */
    public void setAssetEntryPersistence(
        AssetEntryPersistence assetEntryPersistence) {
        this.assetEntryPersistence = assetEntryPersistence;
    }

    /**
     * Returns the asset tag local service.
     *
     * @return the asset tag local service
     */
    public com.liferay.portlet.asset.service.AssetTagLocalService getAssetTagLocalService() {
        return assetTagLocalService;
    }

    /**
     * Sets the asset tag local service.
     *
     * @param assetTagLocalService the asset tag local service
     */
    public void setAssetTagLocalService(
        com.liferay.portlet.asset.service.AssetTagLocalService assetTagLocalService) {
        this.assetTagLocalService = assetTagLocalService;
    }

    /**
     * Returns the asset tag remote service.
     *
     * @return the asset tag remote service
     */
    public com.liferay.portlet.asset.service.AssetTagService getAssetTagService() {
        return assetTagService;
    }

    /**
     * Sets the asset tag remote service.
     *
     * @param assetTagService the asset tag remote service
     */
    public void setAssetTagService(
        com.liferay.portlet.asset.service.AssetTagService assetTagService) {
        this.assetTagService = assetTagService;
    }

    /**
     * Returns the asset tag persistence.
     *
     * @return the asset tag persistence
     */
    public AssetTagPersistence getAssetTagPersistence() {
        return assetTagPersistence;
    }

    /**
     * Sets the asset tag persistence.
     *
     * @param assetTagPersistence the asset tag persistence
     */
    public void setAssetTagPersistence(AssetTagPersistence assetTagPersistence) {
        this.assetTagPersistence = assetTagPersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();

        PersistedModelLocalServiceRegistryUtil.register("com.test.farmers.model.District",
            districtLocalService);
    }

    public void destroy() {
        PersistedModelLocalServiceRegistryUtil.unregister(
            "com.test.farmers.model.District");
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    @Override
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    @Override
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    @Override
    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return District.class;
    }

    protected String getModelClassName() {
        return District.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = districtPersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
