package com.test.farmers.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.test.farmers.model.District;
import com.test.farmers.model.DistrictModel;
import com.test.farmers.model.DistrictSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the District service. Represents a row in the &quot;lr_District&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.test.farmers.model.DistrictModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DistrictImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DistrictImpl
 * @see com.test.farmers.model.District
 * @see com.test.farmers.model.DistrictModel
 * @generated
 */
@JSON(strict = true)
public class DistrictModelImpl extends BaseModelImpl<District>
    implements DistrictModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a district model instance should use the {@link com.test.farmers.model.District} interface instead.
     */
    public static final String TABLE_NAME = "lr_District";
    public static final Object[][] TABLE_COLUMNS = {
            { "districtId", Types.BIGINT },
            { "name", Types.VARCHAR },
            { "code_", Types.INTEGER },
            { "isArchive", Types.BOOLEAN }
        };
    public static final String TABLE_SQL_CREATE = "create table lr_District (districtId LONG not null primary key,name VARCHAR(75) null,code_ INTEGER,isArchive BOOLEAN)";
    public static final String TABLE_SQL_DROP = "drop table lr_District";
    public static final String ORDER_BY_JPQL = " ORDER BY district.name ASC";
    public static final String ORDER_BY_SQL = " ORDER BY lr_District.name ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.test.farmers.model.District"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.test.farmers.model.District"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.test.farmers.model.District"),
            true);
    public static long ISARCHIVE_COLUMN_BITMASK = 1L;
    public static long NAME_COLUMN_BITMASK = 2L;
    public static final String MAPPING_TABLE_LR_FARMERS_DISTRICTS_NAME = "lr_Farmers_Districts";
    public static final Object[][] MAPPING_TABLE_LR_FARMERS_DISTRICTS_COLUMNS = {
            { "districtId", Types.BIGINT },
            { "farmerId", Types.BIGINT }
        };
    public static final String MAPPING_TABLE_LR_FARMERS_DISTRICTS_SQL_CREATE = "create table lr_Farmers_Districts (districtId LONG not null,farmerId LONG not null,primary key (districtId, farmerId))";
    public static final boolean FINDER_CACHE_ENABLED_LR_FARMERS_DISTRICTS = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.lr_Farmers_Districts"), true);
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.test.farmers.model.District"));
    private static ClassLoader _classLoader = District.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            District.class
        };
    private long _districtId;
    private String _name;
    private int _code;
    private boolean _isArchive;
    private boolean _originalIsArchive;
    private boolean _setOriginalIsArchive;
    private long _columnBitmask;
    private District _escapedModel;

    public DistrictModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static District toModel(DistrictSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        District model = new DistrictImpl();

        model.setDistrictId(soapModel.getDistrictId());
        model.setName(soapModel.getName());
        model.setCode(soapModel.getCode());
        model.setIsArchive(soapModel.getIsArchive());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<District> toModels(DistrictSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<District> models = new ArrayList<District>(soapModels.length);

        for (DistrictSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _districtId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setDistrictId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _districtId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return District.class;
    }

    @Override
    public String getModelClassName() {
        return District.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("districtId", getDistrictId());
        attributes.put("name", getName());
        attributes.put("code", getCode());
        attributes.put("isArchive", getIsArchive());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long districtId = (Long) attributes.get("districtId");

        if (districtId != null) {
            setDistrictId(districtId);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        Integer code = (Integer) attributes.get("code");

        if (code != null) {
            setCode(code);
        }

        Boolean isArchive = (Boolean) attributes.get("isArchive");

        if (isArchive != null) {
            setIsArchive(isArchive);
        }
    }

    @JSON
    @Override
    public long getDistrictId() {
        return _districtId;
    }

    @Override
    public void setDistrictId(long districtId) {
        _districtId = districtId;
    }

    @JSON
    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _columnBitmask = -1L;

        _name = name;
    }

    @JSON
    @Override
    public int getCode() {
        return _code;
    }

    @Override
    public void setCode(int code) {
        _code = code;
    }

    @JSON
    @Override
    public boolean getIsArchive() {
        return _isArchive;
    }

    @Override
    public boolean isIsArchive() {
        return _isArchive;
    }

    @Override
    public void setIsArchive(boolean isArchive) {
        _columnBitmask |= ISARCHIVE_COLUMN_BITMASK;

        if (!_setOriginalIsArchive) {
            _setOriginalIsArchive = true;

            _originalIsArchive = _isArchive;
        }

        _isArchive = isArchive;
    }

    public boolean getOriginalIsArchive() {
        return _originalIsArchive;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            District.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public District toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (District) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        DistrictImpl districtImpl = new DistrictImpl();

        districtImpl.setDistrictId(getDistrictId());
        districtImpl.setName(getName());
        districtImpl.setCode(getCode());
        districtImpl.setIsArchive(getIsArchive());

        districtImpl.resetOriginalValues();

        return districtImpl;
    }

    @Override
    public int compareTo(District district) {
        int value = 0;

        value = getName().compareTo(district.getName());

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof District)) {
            return false;
        }

        District district = (District) obj;

        long primaryKey = district.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        DistrictModelImpl districtModelImpl = this;

        districtModelImpl._originalIsArchive = districtModelImpl._isArchive;

        districtModelImpl._setOriginalIsArchive = false;

        districtModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<District> toCacheModel() {
        DistrictCacheModel districtCacheModel = new DistrictCacheModel();

        districtCacheModel.districtId = getDistrictId();

        districtCacheModel.name = getName();

        String name = districtCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            districtCacheModel.name = null;
        }

        districtCacheModel.code = getCode();

        districtCacheModel.isArchive = getIsArchive();

        return districtCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(9);

        sb.append("{districtId=");
        sb.append(getDistrictId());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", code=");
        sb.append(getCode());
        sb.append(", isArchive=");
        sb.append(getIsArchive());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(16);

        sb.append("<model><model-name>");
        sb.append("com.test.farmers.model.District");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>districtId</column-name><column-value><![CDATA[");
        sb.append(getDistrictId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>code</column-name><column-value><![CDATA[");
        sb.append(getCode());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>isArchive</column-name><column-value><![CDATA[");
        sb.append(getIsArchive());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
